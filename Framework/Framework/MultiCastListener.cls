VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "MultiCastListener"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
'    CopyRight (c) 2006 Kelly Ethridge
'
'    This file is part of SimplyVBUnitLib.
'
'    SimplyVBUnitLib is free software; you can redistribute it and/or modify
'    it under the terms of the GNU Library General Public License as published by
'    the Free Software Foundation; either version 2.1 of the License, or
'    (at your option) any later version.
'
'    SimplyVBUnitLib is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU Library General Public License for more details.
'
'    You should have received a copy of the GNU Library General Public License
'    along with Foobar; if not, write to the Free Software
'    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
'
'    Module: MultiCastListener
'

''
' Allows multiple listeners to simultaneously receive <b>ITestListener</b> callback messages.
'
' @remarks When running a test, only one (1) listener is allowed to be passed into the
' <b>Run</b> method. This class allows any number of listeners to process callback
' messages generated by the tests.
' <p>Add any number of listeners to an instance of <b>MultiCastListener</b> then
' pass the <b>MultiCastListener</b> into the <b>Run</b> method of the test.</p>
'
' @see EventCastListener
' @see ITestListener
'
Option Explicit
Implements ITestListener

Private mListeners As New Collection


''
' Adds a listener to the collection.
'
' @param Listener A listener to be added that will receive callback messages.
'
Public Sub Add(ByVal Listener As ITestListener)
    If Listener Is Nothing Then
        Call Err.Raise(5, "MultiCastListener.Add", "Listener cannot be Nothing.")
    End If
    
    On Error GoTo errTrap
    Call mListeners.Add(Listener, CStr(ObjPtr(Listener)))
    Exit Sub
    
errTrap:
    Call Err.Raise(5, , "This listener has already been added.")
End Sub

''
' Removes a listener from the the collection.
'
' @param Listener The listener to be removed.
'
Public Sub Remove(ByVal Listener As ITestListener)
    On Error GoTo errTrap
    Call mListeners.Remove(CStr(ObjPtr(Listener)))
errTrap:
End Sub

''
' Removes all listeners from the collection.
'
Public Sub Clear()
    Set mListeners = New Collection
End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'   ITestListener Interface
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub ITestListener_Hear(ByVal Message As String, Args() As Variant)
    Dim Listener As ITestListener
    For Each Listener In mListeners
        Call Listener.Hear(Message, Args)
    Next Listener
End Sub

Private Sub ITestListener_RunCompleted(ByVal Result As ITestResult)
    Dim Listener As ITestListener
    For Each Listener In mListeners
        Call Listener.RunCompleted(Result)
    Next Listener
End Sub

Private Sub ITestListener_RunStarted(ByVal Test As ITest)
    Dim Listener As ITestListener
    For Each Listener In mListeners
        Call Listener.RunStarted(Test)
    Next Listener
End Sub

Private Sub ITestListener_SetupCompleted(ByVal Result As ContextResult, ByVal HasContext As Boolean)
    Dim Listener As ITestListener
    For Each Listener In mListeners
        Call Listener.SetupCompleted(Result, HasContext)
    Next Listener
End Sub

Private Sub ITestListener_SetupStarted(ByVal Test As TestMethod, ByVal HasContext As Boolean)
    Dim Listener As ITestListener
    For Each Listener In mListeners
        Call Listener.SetupStarted(Test, HasContext)
    Next Listener
End Sub

Private Sub ITestListener_TeardownCompleted(ByVal Result As ContextResult, ByVal HasContext As Boolean)
    Dim Listener As ITestListener
    For Each Listener In mListeners
        Call Listener.TeardownCompleted(Result, HasContext)
    Next Listener
End Sub

Private Sub ITestListener_TeardownStarted(ByVal Test As TestMethod, ByVal HasContext As Boolean)
    Dim Listener As ITestListener
    For Each Listener In mListeners
        Call Listener.TeardownStarted(Test, HasContext)
    Next Listener
End Sub

Private Sub ITestListener_TestCaseCompleted(ByVal Result As TestCaseResult)
    Dim Listener As ITestListener
    For Each Listener In mListeners
        Call Listener.TestCaseCompleted(Result)
    Next Listener
End Sub

Private Sub ITestListener_TestCaseStarted(ByVal TestCase As TestCase)
    Dim Listener As ITestListener
    For Each Listener In mListeners
        Call Listener.TestCaseStarted(TestCase)
    Next Listener
End Sub

Private Sub ITestListener_TestCompleted(ByVal Result As TestResult)
    Dim Listener As ITestListener
    For Each Listener In mListeners
        Call Listener.TestCompleted(Result)
    Next Listener
End Sub

Private Sub ITestListener_TestFixtureSetupCompleted(ByVal Result As ContextResult, ByVal HasContext As Boolean)
    Dim Listener As ITestListener
    For Each Listener In mListeners
        Call Listener.TestFixtureSetupCompleted(Result, HasContext)
    Next Listener
End Sub

Private Sub ITestListener_TestFixtureSetupStarted(ByVal Test As ITest, ByVal HasContext As Boolean)
    Dim Listener As ITestListener
    For Each Listener In mListeners
        Call Listener.TestFixtureSetupStarted(Test, HasContext)
    Next Listener
End Sub

Private Sub ITestListener_TestFixtureTeardownCompleted(ByVal Result As ContextResult, ByVal HasContext As Boolean)
    Dim Listener As ITestListener
    For Each Listener In mListeners
        Call Listener.TestFixtureTeardownCompleted(Result, HasContext)
    Next Listener
End Sub

Private Sub ITestListener_TestFixtureTeardownStarted(ByVal Test As ITest, ByVal HasContext As Boolean)
    Dim Listener As ITestListener
    For Each Listener In mListeners
        Call Listener.TestFixtureTeardownStarted(Test, HasContext)
    Next Listener
End Sub

Private Sub ITestListener_TestStarted(ByVal Test As TestMethod)
    Dim Listener As ITestListener
    For Each Listener In mListeners
        Call Listener.TestStarted(Test)
    Next Listener
End Sub

Private Sub ITestListener_TestSuiteCompleted(ByVal Result As TestSuiteResult)
    Dim Listener As ITestListener
    For Each Listener In mListeners
        Call Listener.TestSuiteCompleted(Result)
    Next Listener
End Sub

Private Sub ITestListener_TestSuiteStarted(ByVal Suite As TestSuite)
    Dim Listener As ITestListener
    For Each Listener In mListeners
        Call Listener.TestSuiteStarted(Suite)
    Next Listener
End Sub
