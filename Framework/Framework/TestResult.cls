VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "TestResult"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
'    CopyRight (c) 2006 Kelly Ethridge
'
'    This file is part of SimplyVBUnitLib.
'
'    SimplyVBUnitLib is free software; you can redistribute it and/or modify
'    it under the terms of the GNU Library General Public License as published by
'    the Free Software Foundation; either version 2.1 of the License, or
'    (at your option) any later version.
'
'    SimplyVBUnitLib is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU Library General Public License for more details.
'
'    You should have received a copy of the GNU Library General Public License
'    along with Foobar; if not, write to the Free Software
'    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
'
'    Module: TestResult
'

''
' Represents the result of a single test being run.
'
' @remarks A single test is one function in a class that was included to be executed.
' <p>Results are used to inspect how the test performed and what errors may have happened.
' There are different results for different types of tests, such as <b>TestSuite</b>,
' <b>TestCase</b> and <b>TestMethod</b>.</p>
' <p>This specific type of result is only generated by a <b>TestMethod</b> object.</p>
'
' @see ITestResult
' @see TestMethod
' @see TestCaseResult
' @see TestSuiteResult
'
Option Explicit
Implements ITestResult

Private mIsFailure      As Boolean
Private mIsIgnored      As Boolean
Private mIsError        As Boolean
Private mExecuted       As Boolean
Private mMessage        As String
Private mDescription    As String
Private mAssertCount    As Long
Private mCause          As String
Private mTest           As ITest
Private mTime           As Currency
Private mParent         As Long



''
' Returns if the result is an error.
'
' @return Returns True if an error occured, False otherwise.
'
Public Property Get IsError() As Boolean
    IsError = mIsError
End Property

''
' Returns if this test result currently has a parent.
'
' @return Returns True if there is currenlty a parent, False otherwise.
' @remarks It is possible for the parent to be released leaving
' only this test result. In that case False will be returned.
'
Public Property Get HasParent() As Boolean
    HasParent = (mParent <> 0)
End Property

''
' Returns the parent test result for this test result
'
' @return The parent test result or Nothing.
' @remarks If the test result is part of a <b>TestCaseResult</b> or
' a <b>TestSuiteResult</b> then that test result will be returned.
' If there is no parent or the parent has released its
' reference to this test result, then Nothing will be returned.
' <p>A weak reference to the parent is kept. This test result will
' not keep the parent alive. If the parent terminates, it should
' manually set the parent to this test result to Nothing.
'
Public Property Get Parent() As ITestResult
    If HasParent Then
        Dim Unk As IUnknown
        Call CopyMemory(Unk, mParent, 4)
        Set Parent = Unk
        Call ZeroMemory(Unk, 4)
    End If
End Property

''
' Sets the parent of this test result.
'
' @param RHS The new parent or Nothing.
' @remarks A weak reference to the parent is kept. This test result
' will not keep the parent alive. When the parent terminates,
' it should manually set this parent Nothing to ensure
' this test result does not try to use it.
'
Public Property Set Parent(ByVal RHS As ITestResult)
    mParent = ObjPtr(RHS)
End Property

''
' Returns a full path name for this test result.
'
' @return A full path name.
' @remarks A test result can be several level down within
' other test results. This returns a path from the toplevel
' test result to the current test result.
'
Public Property Get FullName() As String
    Dim Test As ITest
    Set Test = mTest
    Do While Not Test Is Nothing
        FullName = "\" & Test.Name & FullName
        Set Test = Test.Parent
    Loop
End Property

''
' Returns the test this result was generated from.
'
' @return The test that generated this result.
'
Public Property Get Test() As ITest
    Set Test = mTest
End Property

''
' Returns if the test method was IsIgnored by calling <b>Assert.Ignore</b>.
'
' @return Returns True if the test was IsIgnored, False otherwise.
' @remarks If <b>IsIgnored</b> is True, then the following flags are set:
' <ul>IsFailure = True</ul>
' <ul>Executed = True</ul>
' <p>If the test failed, then it should be checked that it was IsIgnored
' to confirm the failure or IsIgnored state.</p>
'
Public Property Get IsIgnored() As Boolean
    IsIgnored = mIsIgnored
End Property

''
' Returns if the test was successful.
'
' @return Returns True if the test was successful, False otherwise.
' @remarks If the test was IsIgnored then this will alway return False.
'
Public Property Get IsSuccess() As Boolean
    If IsFailure Then Exit Property
    If IsIgnored Then Exit Property
    If IsError Then Exit Property
    
    IsSuccess = True
End Property

''
' Returns if the test failed.
'
' @return Returns True if the test failed, False otherwise.
' @remarks A test can fail by failing an Assert method or by an unexpected error.
'
Public Property Get IsFailure() As Boolean
    IsFailure = mIsFailure
End Property

''
' Returns the name of the test.
'
' @return The name of the test that was Executed.
'
Public Property Get TestName() As String
    TestName = mTest.Name
End Property

''
' Returns a message for a failed test.
'
' @return A message describing why the test failed.
' @remarks This is supplied as one of the argument in the
' Assert methods to be used if the test fails.
'
Public Property Get Message() As String
    Message = mMessage
End Property

''
' Returns if this test has been Executed.
'
' @returns A value indicating if the test has already been run.
' @remarks If the test is ignored by calling <b>Assert.Ignore</b>
' in the test function, it is still flagged as being Executed.
' If <b>Assert.Ignore</b> was called in Setup or TestFixtureSetup
' then the test is not flagged as being executed.
'
Public Property Get Executed() As Boolean
    Executed = mExecuted
End Property

''
' Returns the number of assertions performed during the test.
'
' @return The number of assertions (including sub-test assertions).
'
Public Property Get AssertCount() As Long
    AssertCount = mAssertCount
End Property

''
' Returns the reason the Assertion failed the test.
'
' @return The reason an Assertion decided to the test failed.
' @remarks The framework returns a message describing the
' expectation of the assertion and why it decided to fail the test.
'
Public Property Get Description() As String
    Description = mDescription
End Property

''
' Returns a formated string with the Expectation and Message combined.
'
' @return A formatted message representing the result.
'
Public Function ToString() As String
    ToString = mDescription & IIf(Len(mMessage) > 0, " - " & mMessage, "")
End Function

''
' Returns the number of failures that occured.
'
' @return The number of failures that occured during this test execution.
' @remarks Since this is a result generated by a single <b>TestMethod</b> then
' either 0 or 1 will be returned depending on if the single test was run.
'
Public Property Get FailureCount() As Long
    If mIsFailure Then
        FailureCount = 1
    End If
End Property

''
' Returns the number of tests executed during the execution of the
' test that generated this result.
'
' @return The number of tests run.
' @remarks Since this is a result generated by a single <b>TestMethod</b> then
' either 0 or 1 will be returned depending on if the test was run.
'
Public Property Get TestsRun() As Long
    If mExecuted Then
        TestsRun = 1
    End If
End Property

''
' Searches for a test result by name.
'
' @param Name The name of the resutl to find.
' @return Returns the first occurence of the name.
'
Public Function Find(ByVal Name As String) As ITestResult
    If StrComp(Name, TestName, vbTextCompare) = 0 Then
        Set Find = Me
    End If
End Function

''
' Returns the time the test took to execute in milliseconds.
'
' @return Returns the execution time in milliseconds.
'
Public Property Get Time() As Currency
    Time = mTime
End Property


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'   Friend Interface
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Friend Sub SetFail(Optional ByVal Result As AssertResult)
    Call InitFromResult(Result)
    mIsFailure = True
End Sub

Friend Sub SetIgnore(ByVal Result As AssertResult)
    Call InitFromResult(Result)
    mIsIgnored = True
End Sub

Friend Sub SetError(ByVal Err As ErrObject, ByVal UserTestCase As Object)
    Select Case Err.Number
        Case ERR_METHODNOTFOUND
            mMessage = FormatString("Test {0} not found in class {1}", TestName, UserTestCase)
        Case ERR_INVALIDSIGNATURE
            mMessage = FormatString("Test {0} in class {1} cannot have parameters", TestName, UserTestCase)
        Case Else
            mMessage = Err.Description
    End Select
    
    mDescription = "Unhandled Error"
    mCause = "Unhandled Error"
    mIsError = True
End Sub

Friend Sub SetExecute()
    mExecuted = True
End Sub

Friend Sub SetContextError(ByVal Result As ContextResult)
    mDescription = Result.Description
    mMessage = Result.Message
    mCause = Result.Cause
    Set mTest = Result.Test
    mIsError = True
End Sub

Friend Sub SetAssertCount(ByVal RHS As Long)
    mAssertCount = RHS
End Sub

Friend Sub Init(ByVal Test As ITest)
    Set mTest = Test
End Sub

Friend Sub SetTime(ByVal Time As Currency)
    mTime = Time
End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'   Private Helpers
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub InitFromResult(ByVal Result As AssertResult)
    mDescription = Result.Description
    mMessage = Result.Message
    mCause = Result.AssertName
End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'   ITestResult Interface
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Property Get ITestResult_AssertCount() As Long
    ITestResult_AssertCount = AssertCount
End Property

Private Property Get ITestResult_Count() As Long
    ITestResult_Count = 1
End Property

Private Property Get ITestResult_Description() As String
    ITestResult_Description = Description
End Property

Private Property Get ITestResult_FailureCount() As Long
    ITestResult_FailureCount = FailureCount
End Property

Private Property Get ITestResult_Executed() As Boolean
    ITestResult_Executed = Executed
End Property

Private Function ITestResult_Find(ByVal Name As String) As ITestResult
    Set ITestResult_Find = Find(Name)
End Function

Private Property Get ITestResult_FullName() As String
    ITestResult_FullName = FullName
End Property

Private Property Get ITestResult_HasParent() As Boolean
    ITestResult_HasParent = HasParent
End Property

Private Property Get ITestResult_IsError() As Boolean
    ITestResult_IsError = IsError
End Property

Private Property Get ITestResult_IsFailure() As Boolean
    ITestResult_IsFailure = IsFailure
End Property

Private Property Get ITestResult_IsIgnored() As Boolean
    ITestResult_IsIgnored = IsIgnored
End Property

Private Property Get ITestResult_IsSuccess() As Boolean
    ITestResult_IsSuccess = IsSuccess
End Property

Private Property Get ITestResult_IsTestCaseResult() As Boolean
    ' do nothing
End Property

Private Property Get ITestResult_IsTestResult() As Boolean
    ITestResult_IsTestResult = True
End Property

Private Property Get ITestResult_IsTestSuiteResult() As Boolean
    ' do nothing
End Property

Private Property Get ITestResult_Item(ByVal Index As Variant) As ITestResult
    If (Index = 1) Or (Index = TestName) Then
        Set ITestResult_Item = Me
    End If
End Property

Private Property Get ITestResult_Message() As String
    ITestResult_Message = Message
End Property

Private Function ITestResult_NewEnum() As stdole.IUnknown
    
End Function

Private Property Set ITestResult_Parent(ByVal RHS As ITestResult)
    Set Parent = RHS
End Property

Private Property Get ITestResult_Parent() As ITestResult
    Set ITestResult_Parent = Parent
End Property

Private Property Get ITestResult_Test() As ITest
    Set ITestResult_Test = Test
End Property

Private Property Get ITestResult_TestName() As String
    ITestResult_TestName = TestName
End Property

Private Property Get ITestResult_TestsRun() As Long
    ITestResult_TestsRun = TestsRun
End Property

Private Property Get ITestResult_Time() As Currency
    ITestResult_Time = Time
End Property
